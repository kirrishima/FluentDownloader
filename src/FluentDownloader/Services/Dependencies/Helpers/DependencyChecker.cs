using System.Diagnostics;
using System.Text.RegularExpressions;
using System;

namespace FluentDownloader.Services.Dependencies.Helpers
{
    /// <summary>
    /// A utility class for checking the availability of external programs.
    /// </summary>
    public static class DependencyChecker
    {
        /// <summary>
        /// Checks if a specified program is available by attempting to execute it with the provided arguments.
        /// </summary>
        /// <param name="programName">The name or path of the program to check.</param>
        /// <param name="args">The arguments to pass to the program during execution.</param>
        /// <param name="isAvailable">
        /// Outputs a boolean indicating whether the program executed successfully (exit code equals zero).
        /// </param>
        /// <returns>
        /// The standard output of the program if it is available and executed successfully; otherwise:
        /// <list type="bullet">
        /// <item>If the program fails to execute, returns its error output.</item>
        /// <item>If an exception occurs, returns the exception message.</item>
        /// </list>
        /// </returns>
        /// <remarks>
        /// This method attempts to execute the specified program with the given arguments. It captures the program's 
        /// standard output and error output. If the execution fails or throws an exception, <paramref name="isAvailable"/> 
        /// is set to <c>false</c>, and the corresponding error or exception message is returned.
        /// </remarks>
        public static string? IsProgramAvailable(string programName, string args, out bool isAvailable)
        {
            try
            {
                using (var process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = programName,
                        Arguments = args,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    }
                })
                {
                    process.Start();
                    string output = process.StandardOutput.ReadToEnd();
                    string error = process.StandardError.ReadToEnd();
                    process.WaitForExit();

                    isAvailable = process.ExitCode == 0;

                    return isAvailable ? output : error;
                }
            }
            catch (Exception ex)
            {
                isAvailable = false;
                return ex.Message;
            }
        }

        /// <summary>
        /// Extracts the version information from the output of the FFMpeg program.
        /// </summary>
        /// <param name="output">The output string generated by the FFMpeg program.</param>
        /// <returns>
        /// The extracted version number if found; otherwise, returns <c>"Unknown"</c>.
        /// </returns>
        /// <remarks>
        /// This method uses a regular expression to locate and extract the version information from the given output string.
        /// The version format is expected to match the pattern <c>"ffmpeg version [version_number]"</c>.
        /// </remarks>
        public static string ExtractFfmpegVersion(string output)
        {
            var match = Regex.Match(output, @"ffmpeg version ([^\s]+)", RegexOptions.IgnoreCase);
            return match.Success ? match.Groups[1].Value : "Unknown";
        }
    }
}
